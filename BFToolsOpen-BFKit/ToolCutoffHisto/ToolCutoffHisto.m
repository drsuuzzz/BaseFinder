/* "$Id: ToolCutoffHisto.m,v 1.1.1.1 2005/09/07 22:22:02 giddings Exp $" */
/***********************************************************

Copyright (c) 1992-2000 Morgan Giddings, Jessica Severin, and Lloyd Smith 

All Rights Reserved.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation. 

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale, use
or other dealings in this Software without prior written authorization
of the copyright holder.  Citations, discussions, and references to or regarding
this work in scholarly journals or other scholarly proceedings 
are exempted from this permission requirement.

Support for this work provided by:
The University of Wisconsin-Madison Chemistry Department
The National Institutes of Health/National Human Genome Research Institute
The Department of Energy


******************************************************************/

/* Generated by Interface Builder */

#import "ToolCutoffHisto.h"
#import <GeneKit/NumericalObject.h>

/*****
* July 19, 1994 Mike Koehrsen
* Split ToolCutoffHisto class into ToolCutoffHisto and ToolCutoffHistoCtrl,
* in keeping with the general reorganization of the tool class hierarchy.
*/

@implementation ToolCutoffHisto

- init
{
  threshold = 1.0;
  lowUP = 3;
  combinedData=NO;
  return [super init];
}

- cutoffHistogram:(float*)array :(int)numPoints :(float)thresh :(int)type
{
  int               dist[101];
  int               i, total;
  float             cutoff, min, range, max;
  NumericalObject   *numObj = [NumericalObject new];

  [numObj histogram:array :numPoints :dist];

  max = [numObj maxVal:array numPoints:numPoints];
  min = [numObj minVal:array numPoints:numPoints];
  range = max - min;

  /* type is bit coded.  Bit 1 turns on/off cutoff of low hist values.
     Bit 2 turns on/off cutoff of hi hist values.
     */
  if(type&1) {
    total = 0;
    i = -1;
    do {
      i += 1;
      total += dist[i];
    } while (total < (int) (numPoints * (thresh * 0.01)));
    if (i < 0)
      i = 0;
    cutoff = min + range * ((double) i) * 0.01;

    for (i = 0; i < numPoints; i++)
      if (array[i] < cutoff)
        array[i] = cutoff;
  }

  if(type&2) {
    total = 0;
    i = 101;
    do {
      i -= 1;
      total += dist[i];
    } while (total < (int) (numPoints * (thresh * 0.01)));
    if (i > 100)
      i = 100;
    cutoff = min + range * (double) i * 0.01;

    for (i = 0; i < numPoints; i++)
      if (array[i] > cutoff)
        array[i] = cutoff;
  }
  [numObj release];
  return self;
}


- apply
{
  int               i, j, channel, numChannels, count, combinedCount=0;
  float             *dataArray=NULL, min, *combinedPtr=NULL;
  NumericalObject   *numObj = [NumericalObject new];

  if([self debugmode]) fprintf(stderr, "CutoffHisto-1.1: threshold=%f\n",threshold);
  [numObj normalizeWithCommonScale:dataList];
  numChannels = [dataList numChannels];
  count = [dataList length];
  if(combinedData)
    combinedPtr=(float*)malloc(sizeof(float)*(numChannels*[dataList length]+32));
  if([dataList isProxy])
    dataArray = (float *)calloc(count, sizeof(float));
  for(channel=0; channel< numChannels; channel++) {
    if(selChannels[channel]) {
      if([dataList isProxy]) {
        for(i=0; i<count; i++) dataArray[i] = [dataList sampleAtIndex:i channel:channel];
      } else
        dataArray = [dataList sampleArrayAtChannel:channel];
      if(combinedData) {
        for(j=0; j<count; j++) combinedPtr[combinedCount++] = dataArray[j];
      }
      else {
        [numObj cutoffHistogram:dataArray :count :threshold :lowUP];
        min = [numObj minVal:dataArray numPoints:count];
        for(j=0; j<count; j++) dataArray[j] -= min;
        if([dataList isProxy])
          for(i=0; i<count; i++)
            [dataList setSample:dataArray[i] atIndex:i channel:channel];
      }
    }
  }
  if(combinedData) {
    [numObj cutoffHistogram:combinedPtr :combinedCount :threshold :lowUP];
    min = [numObj minVal:combinedPtr numPoints:combinedCount];
    for(j=0; j<combinedCount; j++) combinedPtr[j] -= min;
    combinedCount=0;
    count = [dataList length];
    for(channel=0; channel<numChannels; channel++) {
      if(selChannels[channel]) {
        for(j=0; j<count; j++)
          [dataList setSample:combinedPtr[combinedCount++] atIndex:j channel:channel];
      }
    }
  }

  [numObj normalizeWithCommonScale:dataList];
  if(combinedData) free(combinedPtr);
  if([dataList isProxy]) free(dataArray);
  [numObj release];
  return [super apply];	
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
  //[super initWithCoder:aDecoder];

  [aDecoder decodeValuesOfObjCTypes:"fi",&threshold,&lowUP];

  return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder
{
  //[super encodeWithCoder:aCoder];

  [aCoder encodeValuesOfObjCTypes:"fi",&threshold,&lowUP];
}

- (NSString *)toolName
{
  return @"Cutoff Histogram - 1.1.3";
}

- handleTag:(char *)tag fromArchiver:archiver
{
  if (!strcmp(tag,"threshold"))
    [archiver readData:&threshold];
  else if (!strcmp(tag,"lowUP"))
    [archiver readData:&lowUP];
  else if (!strcmp(tag,"combinedData"))
    [archiver readData:&combinedData];
  else
    return [super handleTag:tag fromArchiver:archiver];

  return self;	
}

- (void)writeAscii:archiver
{
  [archiver writeData:&threshold type:"f" tag:"threshold"];
  [archiver writeData:&lowUP type:"i" tag:"lowUP"];
  [archiver writeData:&combinedData type:"c" tag:"combinedData"];
  [super writeAscii:archiver];
}

/*****
* NSCopying section
******/
- (id)copyWithZone:(NSZone *)zone
{
  ToolCutoffHisto     *dupSelf;

  dupSelf = [super copyWithZone:zone];

  dupSelf->threshold = threshold;
  dupSelf->lowUP = lowUP;
  dupSelf->combinedData = combinedData;
  return dupSelf;
}

@end
